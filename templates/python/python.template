import MySQLdb as mdb
import _mysql as mysql
import re

class <!table_name!>:

    __settings = {}
    __con = False

    def __init__(self):
        configfile = "sqlcreds.txt"
        f = open(configfile)
        for line in f:
            # skip comment lines
            m = re.search('^\s*#', line)
            if m:
                continue

            # parse key=value lines
            m = re.search('^(\w+)\s*=\s*(\S.*)$', line)
            if m is None:
                continue

            self.__settings[m.group(1)] = m.group(2)
        f.close()

        # create connection
        self.__con = mdb.connect(host=self.__settings['host'], user=self.__settings['username'], passwd=self.__settings['password'], db=self.__settings['database'])

    def __sanitize(self,valuein):
        if type(valuein) == 'str':
            valueout = mysql.escape_string(valuein)
        else:
            valueout = valuein
        return valuein

    def add(self,<!csv_no_primary_key_column_names!>):
        with self.__con:
            cur = self.__con.cursor()
            cur.execute("INSERT INTO <!table_name!>(<!csv_no_primary_key_column_names!>) VALUES(<!insert_value_string!>)",(<!csv_no_primary_key_column_names_sanitized!>))
            cur.close()
            newid = cur.lastrowid
        return newid

    def get(self,<!column_name_primary_key!>):
        with self.__con:
            cur = self.__con.cursor()
            cur.execute("SELECT * FROM <!table_name!> WHERE <!column_name_primary_key!> = %s",(<!column_name_primary_key!>))
            row = cur.fetchone()
            cur.close()
        return row

    def getall(self):
        with self.__con:
            cur = self.__con.cursor()
            cur.execute("SELECT * FROM <!table_name!>")
            rows = cur.fetchall()
            cur.close()

        _<!table_name!> = []
        for row in rows:
            _<!table_name!>.append(row)

        return _<!table_name!>

    def delete(self,<!column_name_primary_key!>):
        with self.__con:
            cur = self.__con.cursor()
            cur.execute("DELETE FROM <!table_name!> WHERE <!column_name_primary_key!> = %s",(<!column_name_primary_key!>))
            cur.close()

    def update(self,<!csv_column_names!>):
        with self.__con:
            cur = self.__con.cursor()
            cur.execute("UPDATE <!table_name!> SET <!update_value_string!> WHERE <!column_name_primary_key!> = %s",(<!csv_no_primary_key_column_names_sanitized!>,<!column_name_primary_key_sanitized!>)))
            cur.close()

##### Application Specific Functions #####
