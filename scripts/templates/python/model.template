import MySQLdb as mdb
import _mysql as mysql
import re

class <!camel_table_name!>:

    __con = False

    def __connect(self):
        con = mdb.connect(host=self.__sql_server__,
                          user=self.__sql_username__,
                          passwd=self.__sql_password__,
                          db=self.__sql_database__,
                         )
        return con

    def __sanitize(self,valuein):
        if type(valuein) == 'str':
            valueout = mysql.escape_string(valuein)
        else:
            valueout = valuein
        return valuein

    def add(self,<!csv_no_primary_key_column_names!>):
        try:
            con = self.__connect()
            with con:
                cur = con.cursor()
                cur.execute("INSERT INTO <!table_name!>(<!csv_no_primary_key_column_names!>) VALUES(<!insert_value_string!>)",
                            (<!csv_no_primary_key_column_names_sanitized!>)
                           )
                cur.close()
                newid = cur.lastrowid
            con.close()
        except Exception, e:
            raise Exception("sql2api error - add() failed with error:\n\n\t{0}".format(e))
        return newid

    def get(self,<!column_name_primary_key!>):
        try:
            con = self.__connect()
            with con:
                cur = con.cursor()
                cur.execute("SELECT * FROM <!table_name!> WHERE <!column_name_primary_key!> = %s",
                            (<!column_name_primary_key!>)
                           )
                row = cur.fetchone()
                cur.close()
            con.close()
        except:
            raise Exception("sql2api error - get() failed with error:\n\n\t{0}".format(e))
        return row

    def getall(self):
        try:
            con = self.__connect()
            with con:
                cur = con.cursor()
                cur.execute("SELECT * FROM <!table_name!>")
                rows = cur.fetchall()
                cur.close()
            _<!table_name!> = []
            for row in rows:
                _<!table_name!>.append(row)
            con.close()
        except:
            raise Exception("sql2api error - getall() failed with error:\n\n\t{0}".format(e))
        return _<!table_name!>

    def delete(self,<!column_name_primary_key!>):
        try:
            con = self.__connect()
            with con:
                cur = con.cursor()
                cur.execute("DELETE FROM <!table_name!> WHERE <!column_name_primary_key!> = %s",
                            (<!column_name_primary_key_sanitized!>)
                           )
                cur.close()
            con.close()
        except:
            raise Exception("sql2api error - delete() failed with error:\n\n\t{0}".format(e))

    def update(self,<!csv_column_names!>):
        try:
            con = self.__connect()
            with con:
                cur = con.cursor()
                cur.execute("UPDATE <!table_name!> SET <!update_value_string!> WHERE <!column_name_primary_key!> = %s",
                            (<!csv_no_primary_key_column_names_sanitized!>,<!column_name_primary_key_sanitized!>)
                           )
                cur.close()
            con.close()
        except:
            raise Exception("sql2api error - update() failed with error:\n\nt{0}".format(e))

    ##### Application Specific Functions #####

#    def myfunc():
#        try:
#            con = self.__connect()
#            with con:
#                cur = son.cursor()
#                cur.execute("")
#                row = cur.fetchone()
#                cur.close()
#            con.close()
#        raise Exception("sql2api error - myfunct() failed with error:\n\n\t".format(e))
#        return row


